{
  "name": "hybrid-chatbot-simplified",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-chatbot",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-input",
      "name": "Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -600,
        300
      ],
      "webhookId": "auto-generated"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "message",
              "value": "={{$json.body.message}}"
            },
            {
              "name": "sessionId",
              "value": "={{$json.body.sessionId || 'session-' + Date.now()}}"
            },
            {
              "name": "userId",
              "value": "={{$json.body.userId || 'anonymous'}}"
            },
            {
              "name": "timestamp",
              "value": "={{DateTime.now().toISO()}}"
            },
            {
              "name": "url",
              "value": "={{$json.body.url || 'unknown'}}"
            },
            {
              "name": "userAgent",
              "value": "={{$json.body.userAgent || 'unknown'}}"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-data",
      "name": "Extract Message Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -400,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.airtable.com/v0/appv2GNhMPW2m9uBJ/Conversation%20Messages?filterByFormula=sessionId%3D%27' + encodeURIComponent($node['Extract Message Data'].json['sessionId'] || 'unknown') + '%27&sort%5B0%5D%5Bfield%5D=timestamp&sort%5B0%5D%5Bdirection%5D=asc&maxRecords=10' }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "options": {}
      },
      "id": "get-history",
      "name": "Get Conversation History",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -200,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "8Wi1V5ujYiar0K2r",
          "name": "Airtable Auth"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { model: 'gpt-4o-mini', messages: [{ role: 'system', content: 'You are Layla, an AI consultant for Insight Intelligence. Analyze user messages and respond appropriately. When users show sales intent (demo, pricing, meeting, schedule keywords), extract their contact information and guide them toward scheduling. For complete leads (name + email), respond with leadType: \"complete\". For partial leads (name/phone only), respond with leadType: \"partial\". For general chat, respond with leadType: \"none\". Always provide a natural response AND structured JSON data at the end with: {\"response\": \"your response\", \"leadType\": \"complete|partial|none\", \"contactInfo\": {\"firstName\": \"\", \"lastName\": \"\", \"email\": \"\", \"phone\": \"\", \"company\": \"\"}, \"nextAction\": \"createLead|requestContact|continueChat\"}' }].concat(($json.records || []).slice(-6).map(r => ({role: r.fields.role, content: r.fields.content}))).concat([{ role: 'user', content: $node['Extract Message Data'].json.message }]), temperature: 0.7, max_tokens: 500 } }}",
        "options": {}
      },
      "id": "ai-conversation",
      "name": "AI Conversation Handler",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        0,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "z3EpNCqUns8T3dP1",
          "name": "openapiHeaderAuth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response and extract structured data\nconst aiMessage = $json.choices[0].message.content;\nconst sessionId = $node['Extract Message Data'].json.sessionId;\nconst userMessage = $node['Extract Message Data'].json.message;\n\n// Try to extract JSON from AI response\nlet structuredData = {\n  response: aiMessage,\n  leadType: 'none',\n  contactInfo: {},\n  nextAction: 'continueChat'\n};\n\n// Look for JSON in the AI response\nconst jsonMatch = aiMessage.match(/\\{[^{}]*\"response\"[^{}]*\\}/);\nif (jsonMatch) {\n  try {\n    const parsed = JSON.parse(jsonMatch[0]);\n    structuredData = { ...structuredData, ...parsed };\n  } catch (e) {\n    console.log('JSON parsing failed, using defaults');\n  }\n}\n\n// Fallback contact extraction if AI didn't provide it\nif (!structuredData.contactInfo.email) {\n  const emailMatch = userMessage.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n  if (emailMatch) structuredData.contactInfo.email = emailMatch[1];\n}\n\nif (!structuredData.contactInfo.phone) {\n  const phoneMatch = userMessage.match(/(\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}|\\d{10})/);\n  if (phoneMatch) structuredData.contactInfo.phone = phoneMatch[1];\n}\n\nif (!structuredData.contactInfo.firstName) {\n  const nameMatch = userMessage.match(/(?:my name is|i'm|i am|call me)\\s+([a-zA-Z]{2,}(?:\\s+[a-zA-Z]{2,})?)/i);\n  if (nameMatch) {\n    const parts = nameMatch[1].split(' ');\n    structuredData.contactInfo.firstName = parts[0];\n    structuredData.contactInfo.lastName = parts[1] || 'Lead';\n  }\n}\n\n// Determine lead type based on available contact info\nif (structuredData.contactInfo.email && (structuredData.contactInfo.firstName || structuredData.contactInfo.phone)) {\n  structuredData.leadType = 'complete';\n  structuredData.nextAction = 'createLead';\n} else if ((structuredData.contactInfo.firstName && structuredData.contactInfo.phone) || structuredData.contactInfo.email) {\n  structuredData.leadType = 'partial';\n  structuredData.nextAction = structuredData.contactInfo.email ? 'createLead' : 'requestContact';\n}\n\n// Clean response text (remove JSON if present)\nstructuredData.response = structuredData.response.replace(/\\{[^{}]*\"response\"[^{}]*\\}/, '').trim();\n\nreturn {\n  json: {\n    ...structuredData,\n    sessionId: sessionId,\n    timestamp: new Date().toISOString(),\n    originalMessage: userMessage,\n    debugInfo: {\n      jsonFound: !!jsonMatch,\n      contactExtracted: Object.keys(structuredData.contactInfo).length > 0\n    }\n  }\n};"
      },
      "id": "process-response",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-complete-lead",
              "leftValue": "={{$json.leadType}}",
              "rightValue": "complete",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-complete-lead",
      "name": "Is Complete Lead?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        400,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-partial-lead",
              "leftValue": "={{$json.leadType}}",
              "rightValue": "partial",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-partial-lead",
      "name": "Is Partial Lead?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        400,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "email": "={{$json.contactInfo.email}}",
        "additionalFields": {
          "companyName": "={{$json.contactInfo.company || 'AI Chat Lead'}}",
          "firstName": "={{$json.contactInfo.firstName || 'Chat'}}",
          "lastName": "={{$json.contactInfo.lastName || 'Lead'}}",
          "phoneNumber": "={{$json.contactInfo.phone || ''}}"
        },
        "options": {}
      },
      "id": "create-hubspot",
      "name": "Create HubSpot Lead",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 2,
      "position": [
        600,
        100
      ],
      "credentials": {
        "hubspotOAuth2Api": {
          "id": "687iXSpXdMKwW2N5",
          "name": "HubSpot account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.airtable.com/v0/appv2GNhMPW2m9uBJ/Incomplete%20Leads",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { records: [{ fields: { firstName: $json.contactInfo.firstName || 'Chat', lastName: $json.contactInfo.lastName || 'Lead', phone: $json.contactInfo.phone || '', email: $json.contactInfo.email || '', company: $json.contactInfo.company || '', message: $json.originalMessage, sessionId: $json.sessionId, timestamp: $json.timestamp, leadSource: 'AI Chat', status: 'new', leadType: $json.leadType } }] } }}",
        "options": {}
      },
      "id": "create-airtable",
      "name": "Create Airtable Lead",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        600,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "8Wi1V5ujYiar0K2r",
          "name": "Airtable Auth"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/me/calendar/getSchedule",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftGraphSecurityOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { schedules: ['demie@insightintelligence.io'], startTime: { dateTime: new Date(Date.now() + 24*60*60*1000).toISOString().split('.')[0] + '.000Z', timeZone: 'UTC' }, endTime: { dateTime: new Date(Date.now() + 7*24*60*60*1000).toISOString().split('.')[0] + '.000Z', timeZone: 'UTC' }, availabilityViewInterval: 60 } }}",
        "options": {}
      },
      "id": "check-calendar",
      "name": "Check Calendar Availability",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        600,
        500
      ],
      "credentials": {
        "microsoftGraphSecurityOAuth2Api": {
          "id": "ciNFD0OJwVOtniqA",
          "name": "Microsoft Graph Security account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process calendar availability and generate available time slots\nconst schedules = $json.value || [];\nconst contactInfo = $node['Process AI Response'].json.contactInfo || {};\nconst leadType = $node['Process AI Response'].json.leadType;\n\n// Only process calendar for leads with contact info\nif (leadType === 'none') {\n  return { json: { skipCalendar: true, contactInfo: contactInfo } };\n}\n\nlet availableSlots = [];\n\nif (schedules.length > 0) {\n  // Create time slots for next 5 business days\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() + 1); // Start tomorrow\n  \n  for (let day = 0; day < 7; day++) {\n    const currentDate = new Date(startDate);\n    currentDate.setDate(startDate.getDate() + day);\n    \n    // Skip weekends\n    const dayOfWeek = currentDate.getDay();\n    if (dayOfWeek === 0 || dayOfWeek === 6) continue;\n    \n    // Add morning slot (10 AM)\n    const morningSlot = new Date(currentDate);\n    morningSlot.setHours(10, 0, 0, 0);\n    \n    // Add afternoon slot (2 PM)\n    const afternoonSlot = new Date(currentDate);\n    afternoonSlot.setHours(14, 0, 0, 0);\n    \n    availableSlots.push({\n      datetime: morningSlot.toISOString(),\n      formatted: morningSlot.toLocaleDateString('en-US', { \n        weekday: 'long', \n        month: 'long', \n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit'\n      }),\n      timeSlot: 'morning'\n    });\n    \n    availableSlots.push({\n      datetime: afternoonSlot.toISOString(),\n      formatted: afternoonSlot.toLocaleDateString('en-US', { \n        weekday: 'long', \n        month: 'long', \n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit'\n      }),\n      timeSlot: 'afternoon'\n    });\n    \n    // Stop after 3 slots to avoid overwhelming\n    if (availableSlots.length >= 3) break;\n  }\n}\n\n// Generate calendar response if we have complete lead info\nlet calendarResponse = '';\nif (availableSlots.length > 0 && (contactInfo.email || (contactInfo.firstName && contactInfo.phone))) {\n  const slotsText = availableSlots.map((slot, index) => \n    `${index + 1}. ${slot.formatted}`\n  ).join('\\n');\n  \n  calendarResponse = `Perfect! I found these available demo times:\\n\\n${slotsText}\\n\\nWhich option works best for you?`;\n}\n\nreturn {\n  json: {\n    availableSlots: availableSlots,\n    calendarResponse: calendarResponse,\n    hasAvailability: availableSlots.length > 0,\n    contactInfo: contactInfo,\n    shouldShowCalendar: !!(contactInfo.email || (contactInfo.firstName && contactInfo.phone))\n  }\n};"
      },
      "id": "process-calendar",
      "name": "Process Available Times",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-create-appointment",
              "leftValue": "={{$json.shouldShowCalendar}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-appointment-needed",
      "name": "Should Create Appointment?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1000,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare appointment data for calendar creation\nconst slots = $json.availableSlots || [];\nconst contact = $json.contactInfo || {};\n\nif (slots.length > 0 && (contact.email || contact.phone)) {\n  const selectedSlot = slots[0]; // Use first available slot\n  const startTime = new Date(selectedSlot.datetime);\n  const endTime = new Date(startTime.getTime() + 30 * 60000); // 30 minutes\n  \n  const appointmentData = {\n    subject: 'AI Automation Demo - ' + (contact.firstName || 'Prospect'),\n    body: {\n      contentType: 'HTML',\n      content: `Demo call with ${contact.firstName || 'Prospect'} ${contact.lastName || ''}\\nEmail: ${contact.email || 'Not provided'}\\nPhone: ${contact.phone || 'Not provided'}\\n\\nDiscuss AI automation solutions and potential $58K+ annual savings.`\n    },\n    start: {\n      dateTime: startTime.toISOString(),\n      timeZone: 'UTC'\n    },\n    end: {\n      dateTime: endTime.toISOString(),\n      timeZone: 'UTC'\n    },\n    attendees: contact.email ? [{\n      emailAddress: {\n        address: contact.email,\n        name: (contact.firstName || 'Prospect') + ' ' + (contact.lastName || '')\n      }\n    }] : [],\n    isOnlineMeeting: true,\n    onlineMeetingProvider: 'teamsForBusiness'\n  };\n  \n  return { json: appointmentData };\n} else {\n  return { json: { skipAppointment: true } };\n}"
      },
      "id": "prepare-appointment",
      "name": "Prepare Appointment Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/me/events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftGraphSecurityOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "id": "create-appointment",
      "name": "Create Calendar Appointment",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1400,
        400
      ],
      "credentials": {
        "microsoftGraphSecurityOAuth2Api": {
          "id": "ciNFD0OJwVOtniqA",
          "name": "Microsoft Graph Security account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.airtable.com/v0/appv2GNhMPW2m9uBJ/Conversation%20Messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { records: [{ fields: { sessionId: $json.sessionId, role: 'user', content: $json.originalMessage, timestamp: $json.timestamp, userId: $node['Extract Message Data'].json.userId } }, { fields: { sessionId: $json.sessionId, role: 'assistant', content: $json.response, timestamp: $json.timestamp, userId: $node['Extract Message Data'].json.userId, leadType: $json.leadType } }] } }}",
        "options": {}
      },
      "id": "save-conversation",
      "name": "Save Conversation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        800,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "8Wi1V5ujYiar0K2r",
          "name": "Airtable Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build comprehensive response with calendar information\nlet responseData = {\n  response: $json.response || 'Thank you for your message!',\n  sessionId: $json.sessionId,\n  timestamp: $json.timestamp,\n  leadType: $json.leadType || 'none',\n  nextAction: $json.nextAction || 'continueChat',\n  contactInfo: $json.contactInfo || {},\n  status: 'success'\n};\n\n// Check if we have calendar data\ntry {\n  const calendarData = $node['Process Available Times']?.json;\n  if (calendarData) {\n    // If we have calendar response, use it instead of the AI response\n    if (calendarData.calendarResponse && calendarData.calendarResponse.trim()) {\n      responseData.response = calendarData.calendarResponse;\n      responseData.availableSlots = calendarData.availableSlots;\n      responseData.hasCalendar = calendarData.hasAvailability;\n    }\n    \n    // Check if appointment was created\n    try {\n      const appointmentData = $node['Create Calendar Appointment']?.json;\n      if (appointmentData && appointmentData.id) {\n        responseData.appointmentCreated = true;\n        responseData.appointmentId = appointmentData.id;\n        responseData.response = `Perfect! I've scheduled your AI automation demo. You'll receive a calendar invitation shortly with the meeting details. Looking forward to showing you how our system can save your business $58K+ annually!`;\n      }\n    } catch (e) {\n      // No appointment created\n    }\n  }\n} catch (e) {\n  // No calendar processing\n}\n\nreturn { json: responseData };"
      },
      "id": "build-response",
      "name": "Build Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        600
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "id": "send-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1000,
        300
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Chat Webhook": {
      "main": [
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message Data": {
      "main": [
        [
          {
            "node": "Get Conversation History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Conversation History": {
      "main": [
        [
          {
            "node": "AI Conversation Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Conversation Handler": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Is Complete Lead?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Partial Lead?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Complete Lead?": {
      "main": [
        [
          {
            "node": "Create HubSpot Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Partial Lead?": {
      "main": [
        [
          {
            "node": "Create Airtable Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create HubSpot Lead": {
      "main": [
        [
          {
            "node": "Check Calendar Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Airtable Lead": {
      "main": [
        [
          {
            "node": "Check Calendar Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Calendar Availability": {
      "main": [
        [
          {
            "node": "Process Available Times",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Available Times": {
      "main": [
        [
          {
            "node": "Should Create Appointment?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Create Appointment?": {
      "main": [
        [
          {
            "node": "Prepare Appointment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Appointment Data": {
      "main": [
        [
          {
            "node": "Create Calendar Appointment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Appointment": {
      "main": [
        [
          {
            "node": "Save Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Conversation": {
      "main": [
        [
          {
            "node": "Build Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Final Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "instanceId": "99aaeba6b75257ee350bb8eb8800a228cb7b97e21f9b2e1e88ec25277f30b9a0"
  },
  "tags": []
}