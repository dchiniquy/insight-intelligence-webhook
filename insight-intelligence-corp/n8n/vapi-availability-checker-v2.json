{
  "name": "Availability-check",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "check-availability",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "bd3ef59f-b2f2-4035-8b31-941237ce42f5",
      "name": "VAPI Availability Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -208,
        0
      ],
      "webhookId": "auto-generated"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "requested_date",
              "value": "={{$json.body.date || $json.body.requested_date || ''}}"
            },
            {
              "name": "time_preference",
              "value": "={{$json.body.time_preference || $json.body.preference || 'any'}}"
            },
            {
              "name": "start_date",
              "value": "={{$json.body.start_date || ''}}"
            },
            {
              "name": "end_date",
              "value": "={{$json.body.end_date || ''}}"
            },
            {
              "name": "duration_minutes",
              "value": "={{$json.body.duration_minutes || $json.body.duration || 30}}"
            },
            {
              "name": "timezone",
              "value": "={{$json.body.timezone || 'America/Los_Angeles'}}"
            },
            {
              "name": "request_type",
              "value": "availability_check"
            },
            {
              "name": "request_time",
              "value": "={{DateTime.now().toISO()}}"
            }
          ]
        },
        "options": {}
      },
      "id": "1b72a7e9-6f2b-4f54-982d-24e16def2728",
      "name": "Extract Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        32,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Calculate date range for availability check\nconst params = $input.first().json;\nconst today = new Date();\nconst tomorrow = new Date(today);\ntomorrow.setDate(today.getDate() + 1);\ntomorrow.setHours(9, 0, 0, 0); // 9 AM\n\nconst endDate = new Date(today);\nendDate.setDate(today.getDate() + 7); // Next 7 days\nendDate.setHours(17, 0, 0, 0); // 5 PM\n\n// If specific date requested, use that instead\nlet startTime, endTime;\n\nif (params.requested_date) {\n  const requestedDate = new Date(params.requested_date);\n  startTime = new Date(requestedDate);\n  endTime = new Date(requestedDate);\n  \n  if (params.time_preference === 'morning') {\n    startTime.setHours(9, 0, 0, 0);\n    endTime.setHours(12, 0, 0, 0);\n  } else if (params.time_preference === 'afternoon') {\n    startTime.setHours(12, 0, 0, 0);\n    endTime.setHours(17, 0, 0, 0);\n  } else if (params.time_preference === 'evening') {\n    startTime.setHours(17, 0, 0, 0);\n    endTime.setHours(20, 0, 0, 0);\n  } else {\n    // Full day availability\n    startTime.setHours(9, 0, 0, 0);\n    endTime.setHours(17, 0, 0, 0);\n  }\n} else if (params.start_date && params.end_date) {\n  startTime = new Date(params.start_date);\n  endTime = new Date(params.end_date);\n} else {\n  // Default: check next 7 days\n  startTime = tomorrow;\n  endTime = endDate;\n}\n\n// Format for Microsoft Graph API\nconst availabilityRequest = {\n  schedules: ['don@insightintelligence.io'],\n  startTime: {\n    dateTime: startTime.toISOString().split('.')[0],\n    timeZone: params.timezone\n  },\n  endTime: {\n    dateTime: endTime.toISOString().split('.')[0], \n    timeZone: params.timezone\n  },\n  availabilityViewInterval: 30\n};\n\nconsole.log('Availability request:', JSON.stringify(availabilityRequest, null, 2));\n\nreturn {\n  json: {\n    ...availabilityRequest,\n    originalParams: params,\n    calculatedStartTime: startTime.toISOString(),\n    calculatedEndTime: endTime.toISOString()\n  }\n};"
      },
      "id": "1fedf3fa-622b-495b-9858-53c964cac2fa",
      "name": "Calculate Date Range",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        0
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-availability-data",
              "leftValue": "={{$json.value && $json.value.length > 0 && $json.value[0].availabilityView}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "59726637-73c6-4280-a6a9-79d92944f55f",
      "name": "Has Availability Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        752,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process successful availability response\nconst availabilityData = $('Check Calendar Availability').first().json;\nconst dateRangeData = $('Calculate Date Range').first().json;\nconst originalParams = dateRangeData.originalParams;\n\n// Extract availability view (0 = free, 1 = tentative, 2 = busy, 3 = out of office)\nconst availabilityView = availabilityData.value?.[0]?.availabilityView || '';\nconst freeBusyViewType = availabilityData.value?.[0]?.freeBusyViewType || 'none';\n\nconsole.log('Availability view:', availabilityView);\nconsole.log('Free/Busy type:', freeBusyViewType);\nconsole.log('Start time from date range:', dateRangeData.calculatedStartTime);\nconsole.log('End time from date range:', dateRangeData.calculatedEndTime);\n\n// Convert to time slots with business hours filtering\nconst availableSlots = [];\nconst startTime = new Date(dateRangeData.calculatedStartTime);\nconst intervalMinutes = 30;\nconst timezone = originalParams.timezone || 'America/Los_Angeles';\n\n// Parse availability view string to find free slots (0s)\nfor (let i = 0; i < availabilityView.length; i++) {\n  if (availabilityView[i] === '0') { // Free slot\n    const slotStart = new Date(startTime.getTime() + (i * intervalMinutes * 60000));\n    const slotEnd = new Date(slotStart.getTime() + (intervalMinutes * 60000));\n    \n    // Convert to target timezone to check business hours\n    const slotInTargetTZ = new Date(slotStart.toLocaleString('en-US', { timeZone: timezone }));\n    const hourInTZ = slotInTargetTZ.getHours();\n    \n    console.log(`Slot ${i}: ${slotStart.toISOString()} = ${hourInTZ}:${slotInTargetTZ.getMinutes().toString().padStart(2, '0')} in ${timezone}`);\n    \n    // Only include slots during business hours (9 AM - 5 PM in target timezone)\n    if (hourInTZ >= 9 && hourInTZ < 17) {\n      const readableTime = slotStart.toLocaleString('en-US', {\n        timeZone: timezone,\n        weekday: 'long',\n        month: 'long', \n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      });\n      \n      availableSlots.push({\n        start_time: slotStart.toISOString(),\n        end_time: slotEnd.toISOString(),\n        start_time_readable: readableTime,\n        duration_minutes: intervalMinutes,\n        available: true,\n        timezone: timezone\n      });\n    } else {\n      console.log(`Filtered out slot at ${hourInTZ}:${slotInTargetTZ.getMinutes().toString().padStart(2, '0')} - outside business hours`);\n    }\n  }\n}\n\nconsole.log(`Total available slots found: ${availableSlots.length}`);\n\n// Limit to next 5 available slots for VAPI response\nconst limitedSlots = availableSlots.slice(0, 5);\n\n// Create success response\nconst response = {\n  status: 'success',\n  available: limitedSlots.length > 0,\n  message: limitedSlots.length > 0 \n    ? `Found ${limitedSlots.length} available time slots during business hours` \n    : 'No availability found during business hours in the requested timeframe',\n  time_slots: limitedSlots,\n  next_available: limitedSlots.length > 0 ? limitedSlots[0] : null,\n  total_slots_found: limitedSlots.length,\n  search_parameters: {\n    date_range: {\n      start: dateRangeData.calculatedStartTime,\n      end: dateRangeData.calculatedEndTime\n    },\n    time_preference: originalParams.time_preference,\n    timezone: timezone,\n    business_hours: '9:00 AM - 5:00 PM'\n  }\n};\n\n// Add conversation context for VAPI\nif (limitedSlots.length > 0) {\n  const firstSlot = limitedSlots[0];\n  response.conversation_context = {\n    suggested_response: `I have availability starting ${firstSlot.start_time_readable}. Would that work for you?`,\n    booking_instructions: 'If the user confirms a time, collect their contact information and use the book-appointment endpoint.',\n    available_options: limitedSlots.slice(0, 3).map(slot => slot.start_time_readable)\n  };\n} else {\n  response.conversation_context = {\n    suggested_response: `I don't see any availability during business hours (9 AM - 5 PM) in that timeframe. Would you like me to check a different date range?`,\n    fallback_action: 'request_alternative_times'\n  };\n}\n\nconsole.log('Success response:', JSON.stringify(response, null, 2));\n\nreturn { json: response };"
      },
      "id": "da6f9a6a-d126-4c54-8a1f-7b45b9bc9528",
      "name": "Format Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle case where no availability data is returned\nconst originalParams = $('Calculate Date Range').first().json.originalParams;\n\nconst errorResponse = {\n  status: 'error',\n  available: false,\n  message: 'Unable to retrieve calendar availability',\n  error: 'No availability data returned from calendar service',\n  time_slots: [],\n  search_parameters: {\n    date_range: 'Unable to determine',\n    time_preference: originalParams.time_preference,\n    timezone: originalParams.timezone\n  },\n  conversation_context: {\n    suggested_response: 'I\\'m having trouble accessing my calendar right now. Could you provide a few preferred times and I\\'ll check back with you shortly?',\n    fallback_action: 'manual_scheduling_required'\n  }\n};\n\nreturn { json: errorResponse };"
      },
      "id": "4703a3bd-e8ee-4a77-8cf4-5adb0c156e99",
      "name": "Format No Data Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle calendar API errors\nconst error = $input.first().json;\nconst originalParams = $('Calculate Date Range').first().json?.originalParams || {};\n\nconst errorResponse = {\n  status: 'error',\n  available: false,\n  message: 'Calendar service temporarily unavailable',\n  error: error.message || 'Unknown calendar error',\n  time_slots: [],\n  search_parameters: {\n    time_preference: originalParams.time_preference || 'any',\n    timezone: originalParams.timezone || 'America/Los_Angeles'\n  },\n  conversation_context: {\n    suggested_response: 'I\\'m experiencing some technical difficulties with my calendar. Let me take down your preferred times and I\\'ll get back to you with confirmation shortly.',\n    fallback_action: 'collect_preferences_for_manual_scheduling',\n    escalation_needed: true\n  }\n};\n\nconsole.log('Error response:', JSON.stringify(errorResponse, null, 2));\n\nreturn { json: errorResponse };"
      },
      "id": "7564a3ac-a9c0-4d57-8569-8c6f14256758",
      "name": "Handle Calendar Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        336
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "fe600d6e-fead-41f5-828f-36b3f429a600",
      "name": "Send Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1232,
        -160
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "6a8973cd-f09e-4752-8435-09ec009105e9",
      "name": "Send No Data Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1232,
        160
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "ff91f4e3-32fb-438b-929d-71fdd3a1bf7f",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        992,
        336
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/me/calendar/getSchedule",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOutlookOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { schedules: $json.schedules, startTime: $json.startTime, endTime: $json.endTime, availabilityViewInterval: $json.availabilityViewInterval } }}",
        "options": {}
      },
      "id": "80841a5e-08c3-4b66-a5e9-cfc68b466e0c",
      "name": "Check Calendar Availability",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        480,
        0
      ],
      "credentials": {
        "microsoftGraphSecurityOAuth2Api": {
          "id": "ciNFD0OJwVOtniqA",
          "name": "Microsoft Graph Security account"
        },
        "microsoftOutlookOAuth2Api": {
          "id": "TjQCfQbNro7WgCik",
          "name": "Microsoft Outlook account 3"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "VAPI Availability Webhook": {
      "main": [
        [
          {
            "node": "Extract Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Parameters": {
      "main": [
        [
          {
            "node": "Calculate Date Range",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Availability Data": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format No Data Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response": {
      "main": [
        [
          {
            "node": "Send Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format No Data Response": {
      "main": [
        [
          {
            "node": "Send No Data Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Calendar Error": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Date Range": {
      "main": [
        [
          {
            "node": "Check Calendar Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Calendar Availability": {
      "main": [
        [
          {
            "node": "Has Availability Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4f0b4d81-e82b-4746-85f3-99e519f019e2",
  "meta": {
    "instanceId": "99aaeba6b75257ee350bb8eb8800a228cb7b97e21f9b2e1e88ec25277f30b9a0"
  },
  "id": "wIL7XOjrqjMCcZHF",
  "tags": []
}