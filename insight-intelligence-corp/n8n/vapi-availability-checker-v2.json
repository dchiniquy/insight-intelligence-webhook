{
  "name": "Availability-check",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "check-availability",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "bd3ef59f-b2f2-4035-8b31-941237ce42f5",
      "name": "VAPI Availability Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -208,
        0
      ],
      "webhookId": "auto-generated"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "toolCallId",
              "value": "={{$json.body?.message?.toolCalls?.[0]?.id || 'unknown'}}"
            },
            {
              "name": "requested_date",
              "value": "={{$json.body?.message?.toolCalls?.[0]?.function?.arguments?.date || $json.body?.message?.toolCalls?.[0]?.function?.arguments?.requested_date || $json.body.date || $json.body.requested_date || ''}}"
            },
            {
              "name": "time_preference",
              "value": "={{$json.body?.message?.toolCalls?.[0]?.function?.arguments?.time_preference || $json.body?.message?.toolCalls?.[0]?.function?.arguments?.preference || $json.body.time_preference || $json.body.preference || 'any'}}"
            },
            {
              "name": "start_date",
              "value": "={{$json.body?.message?.toolCalls?.[0]?.function?.arguments?.start_date || $json.body.start_date || ''}}"
            },
            {
              "name": "end_date",
              "value": "={{$json.body?.message?.toolCalls?.[0]?.function?.arguments?.end_date || $json.body.end_date || ''}}"
            },
            {
              "name": "duration_minutes",
              "value": "={{$json.body?.message?.toolCalls?.[0]?.function?.arguments?.duration_minutes || $json.body?.message?.toolCalls?.[0]?.function?.arguments?.duration || $json.body.duration_minutes || $json.body.duration || 30}}"
            },
            {
              "name": "timezone",
              "value": "={{$json.body?.message?.toolCalls?.[0]?.function?.arguments?.timezone || $json.body.timezone || 'America/Los_Angeles'}}"
            },
            {
              "name": "request_type",
              "value": "availability_check"
            },
            {
              "name": "request_time",
              "value": "={{DateTime.now().toISO()}}"
            }
          ]
        },
        "options": {}
      },
      "id": "1b72a7e9-6f2b-4f54-982d-24e16def2728",
      "name": "Extract Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        32,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Calculate date range for availability check\nconst params = $input.first().json;\nconst today = new Date();\n\n// Debug: Log what VAPI is sending vs Postman\nconsole.log('=== DEBUG: FULL REQUEST ANALYSIS ===');\nconsole.log('Raw input JSON:', JSON.stringify($input.first().json, null, 2));\nconsole.log('Extracted params:', JSON.stringify(params, null, 2));\nconsole.log('requested_date value:', params.requested_date);\nconsole.log('requested_date type:', typeof params.requested_date);\nconsole.log('time_preference value:', params.time_preference);\nconsole.log('time_preference type:', typeof params.time_preference);\nconsole.log('timezone value:', params.timezone);\nconsole.log('Current year should be:', today.getFullYear());\nconsole.log('Current date should be:', today.toISOString().split('T')[0]);\nconsole.log('=== END DEBUG ===');\nconst tomorrow = new Date(today);\ntomorrow.setDate(today.getDate() + 1);\ntomorrow.setHours(9, 0, 0, 0); // 9 AM\n\nconst endDate = new Date(today);\nendDate.setDate(today.getDate() + 7); // Next 7 days\nendDate.setHours(17, 0, 0, 0); // 5 PM\n\n// If specific date requested, use that instead\nlet startTime, endTime;\n\nif (params.requested_date) {\n  console.log('Processing requested_date:', params.requested_date);\n  \n  // Handle different date formats from VAPI\n  let requestedDate;\n  if (typeof params.requested_date === 'string') {\n    // If it's a string, try to parse it properly\n    if (params.requested_date.includes('T')) {\n      // ISO format\n      requestedDate = new Date(params.requested_date);\n    } else if (params.requested_date.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n      // YYYY-MM-DD format\n      requestedDate = new Date(params.requested_date + 'T12:00:00');\n    } else {\n      // Try natural language parsing\n      requestedDate = new Date(params.requested_date);\n    }\n  } else if (typeof params.requested_date === 'number') {\n    // Unix timestamp (check if seconds or milliseconds)\n    if (params.requested_date < 10000000000) {\n      // Seconds since epoch\n      requestedDate = new Date(params.requested_date * 1000);\n    } else {\n      // Milliseconds since epoch\n      requestedDate = new Date(params.requested_date);\n    }\n  } else {\n    // Fallback to tomorrow if parsing fails\n    console.log('Unable to parse requested_date, using tomorrow');\n    requestedDate = new Date(today);\n    requestedDate.setDate(today.getDate() + 1);\n  }\n  \n  console.log('Parsed requested date:', requestedDate.toISOString());\n  console.log('Parsed year:', requestedDate.getFullYear());\n  \n  // Validate the parsed date\n  if (isNaN(requestedDate.getTime()) || requestedDate.getFullYear() < 2024 || requestedDate.getFullYear() > 2030) {\n    console.log('Invalid date detected, using tomorrow instead');\n    requestedDate = new Date(today);\n    requestedDate.setDate(today.getDate() + 1);\n  }\n  \n  // Create times in Pacific timezone, then convert to UTC for Microsoft Graph\n  const targetTimezone = params.timezone || 'America/Los_Angeles';\n  \n  // Get the requested date in Pacific timezone\n  const pacificOffset = -7; // Pacific Standard Time offset (adjust for DST if needed)\n  const year = requestedDate.getFullYear();\n  const month = requestedDate.getMonth();\n  const date = requestedDate.getDate();\n  \n  if (params.time_preference === 'morning') {\n    // 9 AM - 12 PM Pacific = 16:00 - 19:00 UTC\n    startTime = new Date(Date.UTC(year, month, date, 9 - pacificOffset, 0, 0, 0));\n    endTime = new Date(Date.UTC(year, month, date, 12 - pacificOffset, 0, 0, 0));\n  } else if (params.time_preference === 'afternoon') {\n    // 12 PM - 5 PM Pacific = 19:00 - 24:00 UTC (next day 00:00)\n    startTime = new Date(Date.UTC(year, month, date, 12 - pacificOffset, 0, 0, 0));\n    endTime = new Date(Date.UTC(year, month, date, 17 - pacificOffset, 0, 0, 0));\n  } else if (params.time_preference === 'evening') {\n    // 5 PM - 8 PM Pacific = 24:00 - 03:00 UTC (next day)\n    startTime = new Date(Date.UTC(year, month, date, 17 - pacificOffset, 0, 0, 0));\n    endTime = new Date(Date.UTC(year, month, date, 20 - pacificOffset, 0, 0, 0));\n  } else {\n    // Full day availability (9 AM - 8 PM Pacific)\n    startTime = new Date(Date.UTC(year, month, date, 9 - pacificOffset, 0, 0, 0));\n    endTime = new Date(Date.UTC(year, month, date, 20 - pacificOffset, 0, 0, 0));\n  }\n\n  console.log(`Time preference: ${params.time_preference}`);\n  console.log(`Search range: ${startTime.toISOString()} to ${endTime.toISOString()}`);\n  console.log(`Target timezone: ${targetTimezone}`);\n} else if (params.start_date && params.end_date) {\n  startTime = new Date(params.start_date);\n  endTime = new Date(params.end_date);\n} else {\n  // Default: check next 7 days with time preference filtering\n  const targetTimezone = params.timezone || 'America/Los_Angeles';\n\n  if (params.time_preference === 'morning') {\n    // Morning: 9 AM - 12 PM for next 7 days\n    startTime = new Date(tomorrow);\n    startTime.setHours(9, 0, 0, 0);\n    endTime = new Date(today);\n    endTime.setDate(today.getDate() + 7);\n    endTime.setHours(12, 0, 0, 0);\n  } else if (params.time_preference === 'afternoon') {\n    // Afternoon: 12 PM - 5 PM for next 7 days\n    startTime = new Date(tomorrow);\n    startTime.setHours(12, 0, 0, 0);\n    endTime = new Date(today);\n    endTime.setDate(today.getDate() + 7);\n    endTime.setHours(17, 0, 0, 0);\n  } else if (params.time_preference === 'evening') {\n    // Evening: 5 PM - 8 PM for next 7 days\n    startTime = new Date(tomorrow);\n    startTime.setHours(17, 0, 0, 0);\n    endTime = new Date(today);\n    endTime.setDate(today.getDate() + 7);\n    endTime.setHours(20, 0, 0, 0);\n  } else {\n    // Full day availability (9 AM - 8 PM) for next 7 days\n    startTime = new Date(tomorrow);\n    startTime.setHours(9, 0, 0, 0);\n    endTime = new Date(today);\n    endTime.setDate(today.getDate() + 7);\n    endTime.setHours(20, 0, 0, 0);\n  }\n\n  console.log(`=== DEFAULT RANGE CALCULATION ===`);\n  console.log(`Time preference: '${params.time_preference}' (type: ${typeof params.time_preference})`);\n  console.log(`Calculated start time: ${startTime.toISOString()}`);\n  console.log(`Calculated end time: ${endTime.toISOString()}`);\n  console.log(`Target timezone: ${targetTimezone}`);\n  console.log(`Start time readable: ${startTime.toLocaleString('en-US', { timeZone: targetTimezone })}`);\n  console.log(`End time readable: ${endTime.toLocaleString('en-US', { timeZone: targetTimezone })}`);\n  console.log(`=== END DEFAULT RANGE ===`);\n}\n\n// Map timezone to Microsoft Graph format\nlet graphTimezone = 'Pacific Standard Time';\nconst tz = params.timezone || 'America/Los_Angeles';\n\nif (tz.includes('Los_Angeles') || tz.includes('Pacific') || tz === 'PST' || tz === 'PDT') {\n  graphTimezone = 'Pacific Standard Time';\n} else if (tz.includes('New_York') || tz.includes('Eastern') || tz === 'EST' || tz === 'EDT') {\n  graphTimezone = 'Eastern Standard Time';\n} else if (tz.includes('Chicago') || tz.includes('Central') || tz === 'CST' || tz === 'CDT') {\n  graphTimezone = 'Central Standard Time';\n} else if (tz.includes('Denver') || tz.includes('Mountain') || tz === 'MST' || tz === 'MDT') {\n  graphTimezone = 'Mountain Standard Time';\n}\n\nconsole.log(`Original timezone: ${tz} -> Graph timezone: ${graphTimezone}`);\n\n// Format for Microsoft Graph API\nconst availabilityRequest = {\n  schedules: ['don@insightintelligence.io'],\n  startTime: {\n    dateTime: startTime.toISOString().split('.')[0],\n    timeZone: graphTimezone\n  },\n  endTime: {\n    dateTime: endTime.toISOString().split('.')[0], \n    timeZone: graphTimezone\n  },\n  availabilityViewInterval: 30\n};\n\nconsole.log('=== MICROSOFT GRAPH REQUEST ===');\nconsole.log('Availability request:', JSON.stringify(availabilityRequest, null, 2));\nconsole.log('Graph timezone used:', graphTimezone);\nconsole.log('=== END GRAPH REQUEST ===');\n\nreturn {\n  json: {\n    ...availabilityRequest,\n    originalParams: params,\n    calculatedStartTime: startTime.toISOString(),\n    calculatedEndTime: endTime.toISOString()\n  }\n};"
      },
      "id": "1fedf3fa-622b-495b-9858-53c964cac2fa",
      "name": "Calculate Date Range",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        0
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-availability-data",
              "leftValue": "={{$json.value && $json.value.length > 0 && $json.value[0].availabilityView}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "59726637-73c6-4280-a6a9-79d92944f55f",
      "name": "Has Availability Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        752,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process successful availability response with debugging info\nconst availabilityData = $('Check Calendar Availability').first().json;\nconst dateRangeData = $('Calculate Date Range').first().json;\nconst originalParams = dateRangeData.originalParams;\n\n// Extract availability view (0 = free, 1 = tentative, 2 = busy, 3 = out of office)\nconst availabilityView = availabilityData.value?.[0]?.availabilityView || '';\nconst freeBusyViewType = availabilityData.value?.[0]?.freeBusyViewType || 'none';\n\n// Convert to time slots with business hours filtering\nconst availableSlots = [];\nconst startTime = new Date(dateRangeData.calculatedStartTime);\nconst intervalMinutes = 30;\nconst timezone = originalParams.timezone || 'America/Los_Angeles';\n\n// Define time preference hour ranges\nlet preferredHourStart, preferredHourEnd;\nswitch (originalParams.time_preference) {\n  case 'morning':\n    preferredHourStart = 9;\n    preferredHourEnd = 12;\n    break;\n  case 'afternoon':\n    preferredHourStart = 12;\n    preferredHourEnd = 17;\n    break;\n  case 'evening':\n    preferredHourStart = 17;\n    preferredHourEnd = 20;\n    break;\n  default:\n    preferredHourStart = 9;\n    preferredHourEnd = 20;\n}\n\n// Parse availability view string to find free slots (0s)\nfor (let i = 0; i < availabilityView.length; i++) {\n  if (availabilityView[i] === '0') { // Free slot\n    const slotStart = new Date(startTime.getTime() + (i * intervalMinutes * 60000));\n    const slotEnd = new Date(slotStart.getTime() + (intervalMinutes * 60000));\n    \n    // Get the hour in the target timezone using proper conversion\n    const hourInTZ = parseInt(slotStart.toLocaleString('en-US', {\n      timeZone: timezone,\n      hour: 'numeric',\n      hour12: false\n    }));\n\n    // Apply time preference filtering - only include slots in preferred time range\n    if (hourInTZ >= preferredHourStart && hourInTZ < preferredHourEnd) {\n      const readableTime = slotStart.toLocaleString('en-US', {\n        timeZone: timezone,\n        weekday: 'long',\n        month: 'long', \n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      });\n      \n      availableSlots.push({\n        start_time: slotStart.toISOString(),\n        end_time: slotEnd.toISOString(),\n        start_time_readable: readableTime,\n        duration_minutes: intervalMinutes,\n        available: true,\n        timezone: timezone\n      });\n    }\n  }\n}\n\n// Limit to next 5 available slots\nconst limitedSlots = availableSlots.slice(0, 5);\n\n// Create VAPI tool function response format WITH debugging data\nconst toolCallId = $('Extract Parameters').first().json.toolCallId;\n\n// Build debug info for the response\nconst debugInfo = `\\n\\nDEBUG INFO:\\n` +\n  `- Requested: ${originalParams.requested_date} ${originalParams.time_preference}\\n` +\n  `- Search range: ${dateRangeData.calculatedStartTime} to ${dateRangeData.calculatedEndTime}\\n` +\n  `- Timezone: ${timezone}\\n` +\n  `- Time filter: ${preferredHourStart}:00-${preferredHourEnd}:00\\n` +\n  `- Availability view: ${availabilityView} (length: ${availabilityView.length})\\n` +\n  `- Free slots found: ${availableSlots.length}\\n` +\n  `- Graph timezone: Pacific Standard Time`;\n\nconst resultMessage = limitedSlots.length > 0 \n  ? `I have availability at: ${limitedSlots.slice(0, 3).map(slot => slot.start_time_readable).join(', ')}. Which of these times works best for you?${debugInfo}`\n  : `I don't see any availability during ${originalParams.time_preference || 'business'} hours (${preferredHourStart}:00-${preferredHourEnd}:00) in that timeframe. Would you like me to check a different date range or time preference?${debugInfo}`;\n\nconst response = {\n  results: [{\n    toolCallId: toolCallId,\n    result: resultMessage\n  }]\n};\n\nreturn { json: response };"
      },
      "id": "da6f9a6a-d126-4c54-8a1f-7b45b9bc9528",
      "name": "Format Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle case where no availability data is returned\nconst originalParams = $('Calculate Date Range').first().json.originalParams;\n\n// Create VAPI tool function error response\nconst toolCallId = $('Extract Parameters').first().json.toolCallId;\nconst errorResponse = {\n  results: [{\n    toolCallId: toolCallId,\n    result: \"I'm having trouble accessing my calendar right now. Could you provide a few preferred times and I'll check back with you shortly?\"\n  }]\n};\n\nconsole.log('No data response:', JSON.stringify(errorResponse, null, 2));\n\nreturn { json: errorResponse };"
      },
      "id": "4703a3bd-e8ee-4a77-8cf4-5adb0c156e99",
      "name": "Format No Data Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle calendar API errors\nconst error = $input.first().json;\nconst originalParams = $('Calculate Date Range').first().json?.originalParams || {};\n\n// Create VAPI tool function error response\nconst toolCallId = $('Extract Parameters').first().json?.toolCallId || 'unknown';\nconst errorResponse = {\n  results: [{\n    toolCallId: toolCallId,\n    result: \"I'm experiencing some technical difficulties with my calendar. Let me take down your preferred times and I'll get back to you with confirmation shortly.\"\n  }]\n};\n\nconsole.log('Error response:', JSON.stringify(errorResponse, null, 2));\n\nreturn { json: errorResponse };"
      },
      "id": "7564a3ac-a9c0-4d57-8569-8c6f14256758",
      "name": "Handle Calendar Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        336
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "fe600d6e-fead-41f5-828f-36b3f429a600",
      "name": "Send Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1232,
        -160
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "6a8973cd-f09e-4752-8435-09ec009105e9",
      "name": "Send No Data Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1232,
        160
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "ff91f4e3-32fb-438b-929d-71fdd3a1bf7f",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        992,
        336
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/me/calendar/getSchedule",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOutlookOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { schedules: $json.schedules, startTime: $json.startTime, endTime: $json.endTime, availabilityViewInterval: $json.availabilityViewInterval } }}",
        "options": {
          "headers": {
            "entries": [
              {
                "name": "Prefer",
                "value": "outlook.timezone=\"Pacific Standard Time\""
              }
            ]
          }
        }
      },
      "id": "80841a5e-08c3-4b66-a5e9-cfc68b466e0c",
      "name": "Check Calendar Availability",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        480,
        0
      ],
      "credentials": {
        "microsoftGraphSecurityOAuth2Api": {
          "id": "ciNFD0OJwVOtniqA",
          "name": "Microsoft Graph Security account"
        },
        "microsoftOutlookOAuth2Api": {
          "id": "TjQCfQbNro7WgCik",
          "name": "Microsoft Outlook account 3"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "VAPI Availability Webhook": {
      "main": [
        [
          {
            "node": "Extract Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Parameters": {
      "main": [
        [
          {
            "node": "Calculate Date Range",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Availability Data": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format No Data Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response": {
      "main": [
        [
          {
            "node": "Send Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format No Data Response": {
      "main": [
        [
          {
            "node": "Send No Data Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Calendar Error": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Date Range": {
      "main": [
        [
          {
            "node": "Check Calendar Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Calendar Availability": {
      "main": [
        [
          {
            "node": "Has Availability Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4f0b4d81-e82b-4746-85f3-99e519f019e2",
  "meta": {
    "instanceId": "99aaeba6b75257ee350bb8eb8800a228cb7b97e21f9b2e1e88ec25277f30b9a0"
  },
  "id": "wIL7XOjrqjMCcZHF",
  "tags": []
}